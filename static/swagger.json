{
  "openapi": "3.0.0",
  "info": {
    "title": "Gambit Admin API",
    "description": "API for Gambit admin dashboard",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/api",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "admins",
      "description": "Admin user management"
    },
    {
      "name": "roles",
      "description": "Role management and permissions"
    },
    {
      "name": "subscribers",
      "description": "Subscribers management"
    },
    {
      "name": "users",
      "description": "Users management"
    },
    {
      "name": "userProfiles",
      "description": "User profile management and favorites"
    },
    {
      "name": "leagues",
      "description": "Leagues management"
    },
    {
      "name": "teams",
      "description": "Teams management"
    },
    {
      "name": "players",
      "description": "Players management"
    },
    {
      "name": "reels",
      "description": "Reels management"
    },
    {
      "name": "notifications",
      "description": "Notifications management"
    },
    {
      "name": "dashboard",
      "description": "Dashboard data"
    },
    {
      "name": "content",
      "description": "Content management (FAQs, Privacy Policy, Terms & Conditions)"
    }
  ],
  "paths": {
    "/subscribers/": {
      "get": {
        "tags": ["subscribers"],
        "summary": "Get all subscribers",
        "description": "Retrieve a paginated list of subscribers with optional filtering",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "query",
            "name": "subscription_type",
            "schema": {
              "type": "string",
              "enum": ["monthly", "yearly"]
            },
            "description": "Filter by subscription type"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": ["active", "inactive", "expired"]
            },
            "description": "Filter by subscription status"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of subscribers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Subscriber"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["subscribers"],
        "summary": "Create a new subscriber",
        "description": "Create a new subscriber with the provided details",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "name", "subscription_type", "start_date", "end_date", "status"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "name": {
                    "type": "string"
                  },
                  "subscription_type": {
                    "type": "string",
                    "enum": ["monthly", "yearly"]
                  },
                  "start_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["active", "inactive", "expired"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscriber created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Subscriber"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/subscribers/{subscriber_id}": {
      "get": {
        "tags": ["subscribers"],
        "summary": "Get subscriber by ID",
        "description": "Retrieve a specific subscriber by their ID",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "subscriber_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the subscriber to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriber details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Subscriber"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subscriber not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": ["subscribers"],
        "summary": "Update subscriber",
        "description": "Update an existing subscriber's details",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "subscriber_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the subscriber to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "name": {
                    "type": "string"
                  },
                  "subscription_type": {
                    "type": "string",
                    "enum": ["monthly", "yearly"]
                  },
                  "start_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["active", "inactive", "expired"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscriber updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Subscriber"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "404": {
            "description": "Subscriber not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["subscribers"],
        "summary": "Delete subscriber",
        "description": "Delete an existing subscriber",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "subscriber_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the subscriber to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriber deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subscriber not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/subscribers/stats": {
      "get": {
        "tags": ["subscribers"],
        "summary": "Get subscriber statistics",
        "description": "Get statistical information about subscribers",
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "Subscriber statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of subscribers"
                        },
                        "monthly": {
                          "type": "integer",
                          "description": "Number of active monthly subscribers"
                        },
                        "yearly": {
                          "type": "integer",
                          "description": "Number of active yearly subscribers"
                        },
                        "growth_rate": {
                          "type": "number",
                          "format": "float",
                          "description": "Subscriber growth rate"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": ["users"],
        "summary": "Get all users",
        "description": "Retrieve a list of users with optional status filtering",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": ["active", "inactive", "suspended"]
            },
            "description": "Filter users by status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Create a new user",
        "description": "Create a new user with the provided details",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "username", "status", "full_name"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "username": {
                    "type": "string"
                  },
                  "uuid": {
                    "type": "string"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "profile_image": {
                    "type": "string",
                    "format": "uri"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["active", "inactive", "suspended"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": ["users"],
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their ID",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update user",
        "description": "Update an existing user's details",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the user to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "username": {
                    "type": "string"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "profile_image": {
                    "type": "string",
                    "format": "uri"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["active", "inactive", "suspended"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete user",
        "description": "Delete an existing user",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the user to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/uuid/{user_uuid}": {
      "get": {
        "tags": ["users"],
        "summary": "Get user by UUID",
        "description": "Retrieve a specific user by their UUID",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "user_uuid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "UUID of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/stats": {
      "get": {
        "tags": ["users"],
        "summary": "Get user statistics",
        "description": "Get statistical information about users",
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "User statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "total_users": {
                          "type": "integer"
                        },
                        "active_users": {
                          "type": "integer"
                        },
                        "inactive_users": {
                          "type": "integer"
                        },
                        "suspended_users": {
                          "type": "integer"
                        },
                        "recent_registrations": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/activity": {
      "get": {
        "tags": ["users"],
        "summary": "Get user activity",
        "description": "Get user activity data for charting",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Start date for activity data"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "End date for activity data"
          }
        ],
        "responses": {
          "200": {
            "description": "User activity data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserActivity"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/roles/": {
      "get": {
        "tags": ["roles"],
        "summary": "Get all roles",
        "description": "Retrieve a paginated list of roles",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "roles": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Role"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      },
      "post": {
        "tags": ["roles"],
        "summary": "Create a new role",
        "description": "Create a new role with specified permissions",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Role"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or duplicate role name"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    },
    "/roles/{role_id}": {
      "get": {
        "tags": ["roles"],
        "summary": "Get role by ID",
        "description": "Retrieve a specific role by ID",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the role to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Role details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Role"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Role not found"
          }
        }
      },
      "put": {
        "tags": ["roles"],
        "summary": "Update role",
        "description": "Update an existing role's details",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the role to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Role"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or duplicate role name"
          },
          "404": {
            "description": "Role not found"
          }
        }
      },
      "delete": {
        "tags": ["roles"],
        "summary": "Delete role",
        "description": "Delete an existing role",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the role to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Role deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete role assigned to administrators"
          },
          "404": {
            "description": "Role not found"
          }
        }
      }
    },
    "/roles/permissions": {
      "get": {
        "tags": ["roles"],
        "summary": "Get all permissions",
        "description": "Get list of all available permissions",
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "List of permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permission"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles/admin-assignments": {
      "get": {
        "tags": ["roles"],
        "summary": "Get admin-role assignments",
        "description": "Get all admin users with their assigned roles",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of admin-role assignments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "assignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AdminWithroles"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles/assign": {
      "post": {
        "tags": ["roles"],
        "summary": "Assign role to admin",
        "description": "Assign a role to an admin user",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["admin_id", "role_id"],
                "properties": {
                  "admin_id": {
                    "type": "integer"
                  },
                  "role_id": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "admin": {
                      "$ref": "#/components/schemas/Admin"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request or role already assigned"
          },
          "404": {
            "description": "Admin or role not found"
          }
        }
      }
    },
    "/roles/unassign": {
      "post": {
        "tags": ["roles"],
        "summary": "Unassign role from admin",
        "description": "Remove a role from an admin user",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["admin_id", "role_id"],
                "properties": {
                  "admin_id": {
                    "type": "integer"
                  },
                  "role_id": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role unassigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "admin": {
                      "$ref": "#/components/schemas/Admin"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request or role not assigned"
          },
          "404": {
            "description": "Admin or role not found"
          }
        }
      }
    },
    "/admins/": {
      "get": {
        "tags": ["admins"],
        "summary": "Get all admin users",
        "description": "Retrieve a paginated list of admin users",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of admin users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "admins": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Admin"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      },
      "post": {
        "tags": ["admins"],
        "summary": "Create a new admin user",
        "description": "Create a new admin user with specified details",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "email", "name", "password"],
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "name": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "is_active": {
                    "type": "boolean",
                    "default": true
                  },
                  "role_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Admin"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or duplicate username/email"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    },
    "/admins/{admin_id}": {
      "get": {
        "tags": ["admins"],
        "summary": "Get admin by ID",
        "description": "Retrieve a specific admin user by their ID",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "admin_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the admin to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Admin"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Admin not found"
          }
        }
      },
      "put": {
        "tags": ["admins"],
        "summary": "Update admin user",
        "description": "Update an existing admin user's details",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "admin_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the admin to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "name": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "is_active": {
                    "type": "boolean"
                  },
                  "role_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Admin"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or duplicate username/email"
          },
          "404": {
            "description": "Admin not found"
          }
        }
      },
      "delete": {
        "tags": ["admins"],
        "summary": "Delete admin user",
        "description": "Delete an existing admin user",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "admin_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the admin to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete own account"
          },
          "404": {
            "description": "Admin not found"
          }
        }
      }
    },
    "/admins/{admin_id}/toggle-status": {
      "patch": {
        "tags": ["admins"],
        "summary": "Toggle admin status",
        "description": "Toggle the active status of an admin user",
        "security": [{"bearerAuth": []}],
        "parameters": [
          {
            "in": "path",
            "name": "admin_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the admin to toggle status"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "admin": {
                      "$ref": "#/components/schemas/Admin"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot change own account status"
          },
          "404": {
            "description": "Admin not found"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Login for admin users",
        "description": "Authenticates admin users and returns a JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing username or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Account deactivated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": ["auth"],
        "summary": "Get current authenticated admin user",
        "description": "Returns the profile of the currently authenticated admin",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Admin"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "tags": ["auth"],
        "summary": "Change password for current admin user",
        "description": "Updates the password for the currently authenticated admin",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Password changed successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing password or current password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/profile/uuid/{uuid}": {
      "get": {
        "tags": ["userProfiles"],
        "summary": "Get detailed user profile by UUID",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "subscription": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "monthly"
                            },
                            "amount": {
                              "type": "string",
                              "example": "$39.9"
                            },
                            "expiry_date": {
                              "type": "string",
                              "example": "31/12/2023"
                            }
                          }
                        },
                        "favorite_sports": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "example": "NFL"
                              },
                              "logo_url": {
                                "type": "string",
                                "example": "https://example.com/nfl.png"
                              }
                            }
                          }
                        },
                        "favorite_teams": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "example": "LA Lakers"
                              },
                              "logo_url": {
                                "type": "string",
                                "example": "https://example.com/lakers.png"
                              }
                            }
                          }
                        },
                        "favorite_players": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "example": "LeBron James"
                              },
                              "profile_image": {
                                "type": "string",
                                "example": "https://example.com/lebron.png"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/profile/uuid/{uuid}/update-favorites": {
      "put": {
        "tags": ["userProfiles"],
        "summary": "Update user favorite sports, teams, and players",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "favorite_sports": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["NBA", "NFL", "MLB"]
                  },
                  "favorite_teams": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "example": [1, 2, 3]
                  },
                  "favorite_players": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "example": [1, 2, 3]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Favorites updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/profile/uuid/{uuid}/restrict": {
      "post": {
        "tags": ["userProfiles"],
        "summary": "Restrict a user by changing status to suspended",
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User restricted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User johndoe has been restricted"
                        },
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Admin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "admin_user"
          },
          "email": {
            "type": "string",
            "example": "admin@gambit.com"
          },
          "name": {
            "type": "string",
            "example": "Admin User"
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-03T14:36:03.293651"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-03T14:36:03.293651"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-03T14:36:03.293833"
          }
        }
      },
      "AdminInput": {
        "type": "object",
        "required": ["username", "email", "name", "password"],
        "properties": {
          "username": {
            "type": "string",
            "example": "admin_user"
          },
          "email": {
            "type": "string",
            "example": "admin@gambit.com"
          },
          "name": {
            "type": "string",
            "example": "Admin User"
          },
          "password": {
            "type": "string",
            "example": "securepassword"
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "role_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [1, 2]
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Content Manager"
          },
          "description": {
            "type": "string",
            "example": "Manages all content within the application"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [1, 2, 3]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-03T14:36:03.293651"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-03T14:36:03.293833"
          }
        }
      },
      "RoleInput": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Content Manager"
          },
          "description": {
            "type": "string",
            "example": "Manages all content within the application"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [1, 2, 3]
          }
        }
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Content Management"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "username": {
            "type": "string",
            "example": "admin_user"
          },
          "password": {
            "type": "string",
            "example": "securepassword"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              },
              "admin": {
                "$ref": "#/components/schemas/Admin"
              }
            }
          }
        }
      },
      "PasswordChangeRequest": {
        "type": "object",
        "required": ["current_password", "new_password"],
        "properties": {
          "current_password": {
            "type": "string",
            "example": "oldpassword"
          },
          "new_password": {
            "type": "string", 
            "example": "newpassword"
          }
        }
      },
      "Subscriber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "subscription_type": {
            "type": "string",
            "enum": ["monthly", "yearly"],
            "example": "monthly"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T10:30:00"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2023-02-15T10:30:00"
          },
          "status": {
            "type": "string",
            "enum": ["active", "expired", "cancelled"],
            "example": "active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T10:30:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T10:30:00"
          }
        }
      },
      "SubscriberInput": {
        "type": "object",
        "required": ["email", "name", "subscription_type", "start_date", "end_date", "status"],
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "subscription_type": {
            "type": "string",
            "enum": ["monthly", "yearly"],
            "example": "monthly"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T10:30:00"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2023-02-15T10:30:00"
          },
          "status": {
            "type": "string",
            "enum": ["active", "expired", "cancelled"],
            "example": "active"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "username": {
            "type": "string",
            "example": "johndoe"
          },
          "registration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T10:30:00"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "example": "2023-02-15T10:30:00"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended"],
            "example": "active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T10:30:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T10:30:00"
          }
        }
      },
      "League": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Major League Baseball"
          },
          "category": {
            "type": "string",
            "example": "Baseball"
          },
          "country": {
            "type": "string",
            "example": "USA"
          },
          "logo_url": {
            "type": "string",
            "example": "https://www.mlbstatic.com/mlb-logos/league-on-dark/logo-primary-on-dark.svg"
          },
          "popularity": {
            "type": "integer",
            "example": 4800
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T10:30:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T10:30:00"
          }
        }
      },
      "Team": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Baltimore Orioles"
          },
          "league_id": {
            "type": "integer",
            "example": 2
          },
          "logo_url": {
            "type": "string",
            "example": "https://www.mlbstatic.com/team-logos/110.svg"
          },
          "popularity": {
            "type": "integer",
            "example": 4800
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T10:30:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T10:30:00"
          }
        }
      },
      "UserActivity": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-15T00:00:00"
          },
          "active_users": {
            "type": "integer",
            "example": 2100
          },
          "new_users": {
            "type": "integer",
            "example": 150
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "An error occurred"
              },
              "details": {
                "type": "object",
                "nullable": true
              }
            }
          }
        }
      },
      "FAQ": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "question": {
            "type": "string",
            "example": "What is the difference between full truckload (FTL) and less-than-truckload (LTL) shipping?"
          },
          "answer": {
            "type": "string",
            "example": "Full Truckload (FTL) shipping is when the entire truck is dedicated to a single customer's shipment. It's typically used for larger shipments that can fill the entire trailer..."
          },
          "order": {
            "type": "integer",
            "example": 1
          },
          "is_published": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-03T14:36:03.293651"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-03T14:36:03.293833"
          }
        }
      },
      "FAQInput": {
        "type": "object",
        "required": ["question", "answer"],
        "properties": {
          "question": {
            "type": "string",
            "example": "What is the difference between full truckload (FTL) and less-than-truckload (LTL) shipping?"
          },
          "answer": {
            "type": "string",
            "example": "Full Truckload (FTL) shipping is when the entire truck is dedicated to a single customer's shipment. It's typically used for larger shipments that can fill the entire trailer..."
          },
          "order": {
            "type": "integer",
            "example": 1
          },
          "is_published": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "FAQPatchInput": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "example": "What is the difference between full truckload (FTL) and less-than-truckload (LTL) shipping?"
          },
          "answer": {
            "type": "string",
            "example": "Full Truckload (FTL) shipping is when the entire truck is dedicated to a single customer's shipment. It's typically used for larger shipments that can fill the entire trailer..."
          },
          "order": {
            "type": "integer",
            "example": 1
          },
          "is_published": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "ContentPage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "page_type": {
            "type": "string",
            "enum": ["privacy_policy", "terms_conditions"],
            "example": "privacy_policy"
          },
          "title": {
            "type": "string",
            "example": "Privacy Policy"
          },
          "content": {
            "type": "string",
            "example": "This Privacy Policy describes how we collect, use, and handle your personal information..."
          },
          "is_published": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-03T14:36:03.293651"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-03T14:36:03.293833"
          }
        }
      },
      "ContentPageInput": {
        "type": "object",
        "required": ["page_type", "title", "content"],
        "properties": {
          "page_type": {
            "type": "string",
            "enum": ["privacy_policy", "terms_conditions"],
            "example": "privacy_policy"
          },
          "title": {
            "type": "string",
            "example": "Privacy Policy"
          },
          "content": {
            "type": "string",
            "example": "This Privacy Policy describes how we collect, use, and handle your personal information..."
          },
          "is_published": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "ContentPagePatchInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Privacy Policy"
          },
          "content": {
            "type": "string",
            "example": "This Privacy Policy describes how we collect, use, and handle your personal information..."
          },
          "is_published": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Player": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "team_id": {
            "type": "integer"
          },
          "league_id": {
            "type": "integer"
          },
          "position": {
            "type": "string"
          },
          "jersey_number": {
            "type": "string"
          },
          "profile_image": {
            "type": "string"
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "college": {
            "type": "string"
          },
          "height_weight": {
            "type": "string"
          },
          "bat_throw": {
            "type": "string"
          },
          "experience": {
            "type": "string"
          },
          "birthplace": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PlayerWithReels": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Player"
          },
          {
            "properties": {
              "reels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Reel"
                }
              }
            }
          }
        ]
      },
      "Reel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "player_id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "thumbnail_url": {
            "type": "string"
          },
          "video_url": {
            "type": "string"
          },
          "duration": {
            "type": "number"
          },
          "view_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ReelWithDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reel"
          },
          {
            "properties": {
              "player": {
                "$ref": "#/components/schemas/Player"
              },
              "team": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "logo_url": {
                    "type": "string"
                  }
                }
              },
              "league": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "logo_url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "destination_url": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "icon_url": {
            "type": "string"
          },
          "target_type": {
            "type": "string",
            "enum": ["all", "user"]
          },
          "target_user_id": {
            "type": ["integer", "null"]
          },
          "sent": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NotificationInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "destination_url": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "icon_url": {
            "type": "string"
          },
          "target_type": {
            "type": "string",
            "enum": ["all", "user"],
            "default": "all"
          },
          "target_user_id": {
            "type": ["integer", "null"]
          },
          "sent": {
            "type": "boolean",
            "default": false
          }
        },
        "required": ["title", "message", "destination_url"]
      }
    }
  }
}
